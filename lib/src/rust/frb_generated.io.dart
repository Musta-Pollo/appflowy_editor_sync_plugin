// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.8.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'doc/document_types.dart';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw);

  @protected
  Map<String, BlockDoc> dco_decode_Map_String_block_doc(dynamic raw);

  @protected
  Map<String, List<String>> dco_decode_Map_String_list_String(dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  BlockActionDoc dco_decode_block_action_doc(dynamic raw);

  @protected
  BlockActionTypeDoc dco_decode_block_action_type_doc(dynamic raw);

  @protected
  BlockDoc dco_decode_block_doc(dynamic raw);

  @protected
  CustomRustError dco_decode_custom_rust_error(dynamic raw);

  @protected
  DocumentState dco_decode_document_state(dynamic raw);

  @protected
  FailedToDecodeUpdates dco_decode_failed_to_decode_updates(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<String> dco_decode_list_String(dynamic raw);

  @protected
  Uint32List dco_decode_list_prim_u_32_strict(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<(String, BlockDoc)> dco_decode_list_record_string_block_doc(dynamic raw);

  @protected
  List<(String, List<String>)> dco_decode_list_record_string_list_string(
    dynamic raw,
  );

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  Uint32List? dco_decode_opt_list_prim_u_32_strict(dynamic raw);

  @protected
  (String, BlockDoc) dco_decode_record_string_block_doc(dynamic raw);

  @protected
  (String, List<String>) dco_decode_record_string_list_string(dynamic raw);

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  Map<String, String> sse_decode_Map_String_String(
    SseDeserializer deserializer,
  );

  @protected
  Map<String, BlockDoc> sse_decode_Map_String_block_doc(
    SseDeserializer deserializer,
  );

  @protected
  Map<String, List<String>> sse_decode_Map_String_list_String(
    SseDeserializer deserializer,
  );

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  BlockActionDoc sse_decode_block_action_doc(SseDeserializer deserializer);

  @protected
  BlockActionTypeDoc sse_decode_block_action_type_doc(
    SseDeserializer deserializer,
  );

  @protected
  BlockDoc sse_decode_block_doc(SseDeserializer deserializer);

  @protected
  CustomRustError sse_decode_custom_rust_error(SseDeserializer deserializer);

  @protected
  DocumentState sse_decode_document_state(SseDeserializer deserializer);

  @protected
  FailedToDecodeUpdates sse_decode_failed_to_decode_updates(
    SseDeserializer deserializer,
  );

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer);

  @protected
  Uint32List sse_decode_list_prim_u_32_strict(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<(String, BlockDoc)> sse_decode_list_record_string_block_doc(
    SseDeserializer deserializer,
  );

  @protected
  List<(String, List<String>)> sse_decode_list_record_string_list_string(
    SseDeserializer deserializer,
  );

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
    SseDeserializer deserializer,
  );

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  Uint32List? sse_decode_opt_list_prim_u_32_strict(
    SseDeserializer deserializer,
  );

  @protected
  (String, BlockDoc) sse_decode_record_string_block_doc(
    SseDeserializer deserializer,
  );

  @protected
  (String, List<String>) sse_decode_record_string_list_string(
    SseDeserializer deserializer,
  );

  @protected
  (String, String) sse_decode_record_string_string(
    SseDeserializer deserializer,
  );

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_Map_String_String(
    Map<String, String> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_Map_String_block_doc(
    Map<String, BlockDoc> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_Map_String_list_String(
    Map<String, List<String>> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_block_action_doc(
    BlockActionDoc self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_block_action_type_doc(
    BlockActionTypeDoc self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_block_doc(BlockDoc self, SseSerializer serializer);

  @protected
  void sse_encode_custom_rust_error(
    CustomRustError self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_document_state(DocumentState self, SseSerializer serializer);

  @protected
  void sse_encode_failed_to_decode_updates(
    FailedToDecodeUpdates self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_32_strict(
    Uint32List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_record_string_block_doc(
    List<(String, BlockDoc)> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_record_string_list_string(
    List<(String, List<String>)> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_list_record_string_string(
    List<(String, String)> self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_u_32_strict(
    Uint32List? self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_record_string_block_doc(
    (String, BlockDoc) self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_record_string_list_string(
    (String, List<String>) self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_record_string_string(
    (String, String) self,
    SseSerializer serializer,
  );

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;
}
